package algorithmI;

public class UFweightedquickunion {
	private int count;
	private int[] id;
	private int[] sz;

	public UFweightedquickunion(int N){
		count = N;
		id = new int[N];
		for(int i=0; i<N; i++){
			id[i] = i;
		}
		sz = new int[N];
		for(int i=0; i<N; i++){
			sz[i] = 1;
		}
	}

	public int count(){
		return count;
	}
	

	public boolean connected(int p, int q){
		return find(p) == find(q);
	}

	public int find(int p){
		while(id[p] != p) p = id[p];
		return id[p];
	}

	public void union(int p, int q){
		int i = find(p);
		int j = find(q);
		if(i == j) return;
		
		if(sz[i] < sz[j]) {
			id[i] = j;
			sz[j] += sz[i];
		}
		else{
			id[j] = id[i];
			sz[i] += sz[j];
		}
		
		count--;	
	}

	public	static void main(String[] args){
		UFweightedquickunion uf = new UFweightedquickunion(10);
		System.out.println(uf.connected(4, 9));
		uf.union(4, 9);
		System.out.println(uf.connected(4, 9));
		System.out.println(uf.count());;
		uf.union(2, 9);
		System.out.println(uf.count());
		
	}

}
